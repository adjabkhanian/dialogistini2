import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.markdown import hlink

from pyairtable import Table
from datetime import datetime

from config import BOT_TOKEN, AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, ADMINS

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# Airtable
table = Table(AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME)

# –ë–æ—Ç
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_email = State()
    waiting_for_fullname = State()
    waiting_for_knowledge_choice = State()


@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    contact_button = KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    kb = ReplyKeyboardMarkup(keyboard=[[contact_button]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª, –æ—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)


@dp.message(F.contact)
async def get_contact(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π email:")
    await state.set_state(Form.waiting_for_email)


@dp.message(Form.waiting_for_email)
async def get_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Form.waiting_for_fullname)


@dp.message(Form.waiting_for_fullname)
async def get_fullname(message: Message, state: FSMContext):
    await state.update_data(fullname=message.text)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò –î–ª—è —Å–µ–±—è", callback_data="self")],
        [InlineKeyboardButton(text="üìó –î–ª—è —Å–µ–±—è –∏ –¥—Ä—É–≥–∏—Ö", callback_data="both")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å—Ç–æ –Ω–∞–±–ª—é–¥–∞—Ç—å", callback_data="observe")]
    ])

    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –∑–Ω–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(Form.waiting_for_knowledge_choice)


@dp.callback_query(Form.waiting_for_knowledge_choice)
async def process_choice(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.answer()

    choice_map = {
        "self": "–ü–æ–ª—É—á–∞—Ç—å –¥–ª—è —Å–µ–±—è –∏ –≤–Ω–µ–¥—Ä—è—Ç—å –∏—Ö",
        "both": "–ü–æ–ª—É—á–∞—Ç—å, –≤–Ω–µ–¥—Ä—è—Ç—å –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥—Ä—É–≥–∏–º",
        "observe": "–•–æ—á—É –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–Ω–∞–±–ª—é–¥–∞—Ç—å"
    }

    full_data = {
        "Telegram ID": str(callback.from_user.id),
        "Username": callback.from_user.username or "",
        "Phone": data.get("phone"),
        "Email": data.get("email"),
        "Full Name": data.get("fullname"),
        "Knowledge Intention": choice_map.get(callback.data),
        "Registered At": datetime.now().isoformat()
    }

    table.create(full_data)

    await callback.message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª:\n" +
        hlink("üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", "https://t.me/dialogistiny_official"),
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()


@dp.message(F.text.startswith("/sendall"))
async def send_all(message: Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    text = message.text.replace("/sendall", "").strip()
    if not text:
        return await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä:\n/sendall –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞!")

    records = table.all()
    success = 0

    for record in records:
        user_id = record['fields'].get("Telegram ID")
        if user_id:
            try:
                await bot.send_message(chat_id=int(user_id), text=text)
                success += 1
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} —Å–æ–æ–±—â–µ–Ω–∏–π.")


if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))