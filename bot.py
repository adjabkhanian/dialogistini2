import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.markdown import hlink

from pyairtable import Table
from datetime import datetime

from config import BOT_TOKEN, AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, ADMINS

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# Airtable
table = Table(AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME)

# –ë–æ—Ç
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_email = State()


@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    contact_button = KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    kb = ReplyKeyboardMarkup(keyboard=[[contact_button]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª, –æ—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)


@dp.message(F.contact)
async def get_contact(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π email:")
    await state.set_state(Form.waiting_for_email)


@dp.message(Form.waiting_for_email)
async def get_email(message: Message, state: FSMContext):
    user_data = await state.get_data()
    phone = user_data.get("phone")
    email = message.text
    user_id = message.from_user.id
    username = message.from_user.username or ""
    now = datetime.now().isoformat()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Airtable
    table.create({
        "Telegram ID": str(user_id),
        "Username": username,
        "Phone": phone,
        "Email": email,
        "Registered At": now
    })

    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
        + hlink("üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", "https://t.me/dialogistiny_official"),
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()


@dp.message(F.text.startswith("/sendall"))
async def send_all(message: Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    text = message.text.replace("/sendall", "").strip()
    if not text:
        return await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä:\n/sendall –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞!")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    records = table.all()
    success = 0
    for record in records:
        user_id = record['fields'].get("Telegram ID")
        if user_id:
            try:
                await bot.send_message(chat_id=int(user_id), text=text)
                success += 1
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} —Å–æ–æ–±—â–µ–Ω–∏–π.")


if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))